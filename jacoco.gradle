apply plugin: "jacoco"

jacoco {
    toolVersion = "0.8.7"
}

tasks.withType(Test).configureEach {
    jacoco.includeNoLocationClasses = true
    jacoco.excludes = ['jdk.internal.*']
}

// Files with such regex patterns are to be excluded
def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*',
                  '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']

// Location of generated output classes
def debugTree = fileTree(dir: "$project.buildDir/tmp/kotlin-classes/debug",
        excludes: fileFilter)

// Source code directory
def mainSrc = "$project.projectDir/src/main/java"

tasks.register('jacocoTestReport', JacocoReport) {
    dependsOn['testDebugUnitTest', 'createDebugCoverageReport']

    reports {
        xml.required = true
        html.required = true
    }

    sourceDirectories.setFrom(files([mainSrc]))
    classDirectories.setFrom(files([debugTree]))
    executionData.setFrom(fileTree(dir: "$buildDir", includes: [
            "outputs/unit_test_code_coverage/debugUnitTest/testDebugUnitTest.exec",
            "outputs/code_coverage/debugAndroidTest/connected/**/*coverage.ec"
    ]))
}

tasks.register('verifyTestCoverage', JacocoCoverageVerification) {
    enabled = true
    sourceDirectories.from = files([mainSrc])
    classDirectories.from = files([debugTree])
    executionData.setFrom(fileTree(dir: "$buildDir", includes: [
            "outputs/unit_test_code_coverage/debugUnitTest/testDebugUnitTest.exec",
            "outputs/code_coverage/debugAndroidTest/connected/**/*coverage.ec"
    ]))
    violationRules {
        failOnViolation = true
        // 1
        rule {
            enabled = true
            element = 'PACKAGE'
            includes = ['com.tealium.*']
            limit {
                counter = 'CLASS'
                value = 'MISSEDCOUNT'
                maximum = 1
            }
        }
        // 2
        rule {
            element = 'PACKAGE'
            includes = ['com.tealium.*']
            limit {
                value = 'COVEREDRATIO'
                counter = 'INSTRUCTION'
                minimum = 0.3
            }
        }
    }
}
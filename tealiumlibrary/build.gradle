apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'maven-publish'

version = '0.1.2'

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.3"

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 1
        versionName "$version"
        buildConfigField 'String', 'TAG', "\"Tealium-$version\""
        buildConfigField 'String', 'LIBRARY_NAME', "\"android-kotlin\""
        buildConfigField 'String', 'LIBRARY_VERSION', "\"$version\""

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            testCoverageEnabled true
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

//    packagingOptions {
//        pickFirst("META-INF/atomicfu.kotlin_module")
//    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_core_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines_android_version"
    testImplementation "org.robolectric:robolectric:4.3.1"
    testImplementation "io.mockk:mockk:$mockk_version"
    testImplementation 'junit:junit:4.12'
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutines_test_version"
    testImplementation("com.squareup.okhttp3:mockwebserver:4.3.1")
    androidTestImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutines_test_version"
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test:rules:1.2.0'
    androidTestImplementation 'androidx.test:core:1.2.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    androidTestImplementation "io.mockk:mockk-android:$mockk_version"
    androidTestImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_core_version"
    androidTestImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines_android_version"
}

repositories {
    mavenCentral()
    maven { url "https://kotlin.bintray.com/kotlinx" }
}

afterEvaluate {
    publishing {
        publications {
            release(MavenPublication) {
                from components.release
                groupId = 'com.tealium'
                artifactId = 'kotlin-core'
            }
        }
//        repositories {
//            maven {
//                url "s3://maven.tealiumiq.com/android/releases/"
//                credentials(AwsCredentials) {
//                    accessKey AWS_ACCESS_KEY
//                    secretKey AWS_SECRET_KEY
//                }
//            }
//        }
    }
}

apply plugin: "jacoco"

//tasks.withType(Test) {
//    jacoco.includeNoLocationClasses = true
//}
//
//// Files with such regex patterns are to be excluded
def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*',
                  '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
//
//// Location of generated output classes
def debugTree = fileTree(dir: "$project.buildDir/tmp/kotlin-classes/debug",
        excludes: fileFilter)
//
//// Source code directory
def mainSrc = "$project.projectDir/src/main/java"

// Task declaration
task jacocoTestReport(type: JacocoReport) {
    // Runs only after the dependencies are executed
    dependsOn = ['testDebugUnitTest', 'createDebugCoverageReport']
    // Export formats
    reports {
        xml.enabled = true
        html.enabled = true
    }

//    println "setting sourceDirectories $mainSrc"
//    println "setting sourceDirectories $debugTree"
    sourceDirectories.setFrom(files([mainSrc]))
    classDirectories.setFrom(files([debugTree]))

    // Inform Gradle where the files generated by test cases - are located
    executionData.from = fileTree(dir: project.buildDir, includes: [
            'jacoco/testDebugUnitTest.exec',
            'outputs/code_coverage/debugAndroidTest/connected/*.ec'
    ])
}

// Task declaration
task verifyTestCoverage(type: JacocoCoverageVerification) {
    // Run only after the test reports are generated
    dependsOn = ['jacocoTestReport']
    enabled = true
    sourceDirectories.from = files([mainSrc])
    classDirectories.from = files([debugTree])
    executionData.from = fileTree(dir: project.buildDir, includes: [
            'jacoco/testDebugUnitTest.exec',
            'outputs/code_coverage/debugAndroidTest/connected/*.ec'
    ])

    violationRules {
        failOnViolation = true
        // 1
        rule {
            enabled = true
            element = 'PACKAGE'
            includes = ['com.tealium.location']
            limit {
                counter = 'CLASS'
                value = 'MISSEDCOUNT'
                maximum = 10
            }
        }
        // 2
        rule {
            element = 'PACKAGE'
            includes = ['com.tealium.location']
            limit {
                value = 'COVEREDRATIO'
                counter = 'INSTRUCTION'
                minimum = 0.3
            }
        }

    }
}
check.dependsOn verifyTestCoverage
